#include <iostream>
#include <stack>
#include <cmath>
#include <algorithm>
using namespace std;

struct Point {
    int x, y;

    bool operator <(const Point& other) const {
        if (x == other.x)
            return y < other.y;
        return x < other.x;
    }
};

Point p0;

int dist(Point a, Point b) {
    return (b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y);
}

int orient(Point a, Point b, Point c) {
    int diff = (b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y);
    if (diff == 0)
        return 0;
    return (diff > 0) ? 1 : 2;
}

bool cmp(Point a, Point b) {
    int ord = orient(p0, a, b);
    if (ord == 0)
        return dist(p0, a) < dist(p0, b);
    return (ord == 2);
}

void convexHull(Point* points, int n) {
    int ymin = points[0].y, min = 0;
    for (int i = 1; i < n; i++) {
        int y = points[i].y;
        if ((y < ymin) || (ymin == y && points[i].x < points[min].x))
            ymin = points[i].y, min = i;
    }
    swap(points[0], points[min]);
    p0 = points[0];
    sort(points + 1, points + n, cmp);
    int m = 1;
    for (int i = 1; i < n; i++) {
        while (i < n - 1 && orient(p0, points[i], points[i + 1]) == 0)
            i++;
        points[m] = points[i];
        m++;
    }
    if (m < 3)
        return;
    stack<Point> S;
    S.push(points[0]);
    S.push(points[1]);
    S.push(points[2]);
    
    for (int i = 3; i < m; i++) {
        while (orient(S.top(), points[1], points[i]) != 2)
            S.pop();
        S.push(points[i]);
    }
    cout << "Convex hull points:\n"; // instead of printing, output can be further processed
    while (!S.empty()) {
        Point p = S.top();
        cout << "(" << p.x << ", " << p.y << ")" << endl;
        S.pop();
    }
}

int main() {
    Point points[] = { {0, 3}, {1, 1}, {2, 2}, {4, 4},
                      {0, 0}, {1, 2}, {3, 1}, {3, 3} };
    int n = sizeof(points) / sizeof(points[0]);
    convexHull(points, n);
    return 0;
}